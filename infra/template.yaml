AWSTemplateFormatVersion: '2010-09-09'
Description: 'Serverless Contact Form Infrastructure'

Resources:
  # DynamoDB Table
  ContactsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ContactsTable
      AttributeDefinitions:
        - AttributeName: messageId
          AttributeType: S
      KeySchema:
        - AttributeName: messageId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt ContactsTable.Arn

  # Lambda Function
  FormHandler:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FormHandler
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref ContactsTable
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const dynamodb = new AWS.DynamoDB.DocumentClient();
          
          exports.handler = async (event) => {
              const headers = {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type',
                  'Access-Control-Allow-Methods': 'POST, OPTIONS'
              };
              
              if (event.httpMethod === 'OPTIONS') {
                  return {
                      statusCode: 200,
                      headers,
                      body: ''
                  };
              }
              
              try {
                  const { name, email, message } = JSON.parse(event.body);
                  
                  if (!name || !email || !message) {
                      return {
                          statusCode: 400,
                          headers,
                          body: JSON.stringify({ error: 'Missing required fields' })
                      };
                  }
                  
                  const messageId = Date.now().toString() + Math.random().toString(36).substr(2, 9);
                  
                  const params = {
                      TableName: process.env.TABLE_NAME,
                      Item: {
                          messageId,
                          name,
                          email,
                          message,
                          timestamp: new Date().toISOString(),
                          processed: false
                      }
                  };
                  
                  await dynamodb.put(params).promise();
                  
                  return {
                      statusCode: 200,
                      headers,
                      body: JSON.stringify({ 
                          success: true, 
                          messageId,
                          message: 'Thank you for your message! We will get back to you soon.' 
                      })
                  };
                  
              } catch (error) {
                  console.error('Error:', error);
                  return {
                      statusCode: 500,
                      headers,
                      body: JSON.stringify({ error: 'Internal server error' })
                  };
              }
          };

  # API Gateway
  ContactFormApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ContactFormApi
      Description: API for serverless contact form
      EndpointConfiguration:
        Types: [REGIONAL]

  # API Gateway Resource
  SubmitResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ContactFormApi
      ParentId: !GetAtt ContactFormApi.RootResourceId
      PathPart: submit

  # API Gateway Method
  SubmitMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ContactFormApi
      ResourceId: !Ref SubmitResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FormHandler.Arn}/invocations'

  # OPTIONS Method for CORS
  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ContactFormApi
      ResourceId: !Ref SubmitResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseHeaders:
            Access-Control-Allow-Origin: true
            Access-Control-Allow-Headers: true
            Access-Control-Allow-Methods: true

  # Lambda Permission for API Gateway
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FormHandler
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${ContactFormApi}/*/*'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - SubmitMethod
      - OptionsMethod
    Properties:
      RestApiId: !Ref ContactFormApi
      StageName: prod

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ContactFormApi}.execute-api.${AWS::Region}.amazonaws.com/prod/submit'
    Export:
      Name: ContactFormApiEndpoint
  
  TableName:
    Description: DynamoDB table name
    Value: !Ref ContactsTable
    Export:
      Name: ContactsTableName
